import { TransactionBlock, verifyMessage, IntentScope } from '@mysten/sui.js';
import { WalletAccount } from '@mysten/wallet-standard';
import EthosConnectProvider from './components/EthosConnectProvider';
import SignInButton from './components/styled/SignInButton';
import { hideSignInModal, showSignInModal } from './components/styled/SignInModal';
import { AddressWidgetButtons } from './enums/AddressWidgetButtons';
import { Chain } from './enums/Chain';
import { EthosConnectStatus } from './enums/EthosConnectStatus';
import { ProviderAndSigner } from './types/ProviderAndSigner';
import { Signer } from './types/Signer';
import { Wallet } from './types/Wallet';
import { SuiNFT, Token, WalletContents } from './types/WalletContents';
import DetachedEthosConnectProvider from './components/DetachedEthosConnectProvider';
declare const ethos: {
    login: ({ email, provider, apiKey }: import("./lib/login").loginArgs) => Promise<import("./types/User").User | null | undefined>;
    logout: (signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner, fromWallet?: boolean) => Promise<void>;
    sign: ({ signer, message }: {
        signer?: any;
        message: string | Uint8Array;
    }) => Promise<any>;
    transact: ({ signer, transactionInput }: {
        signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner;
        transactionInput: import("./types/EthosSignAndExecuteTransactionBlockInput").EthosSignAndExecuteTransactionBlockInput;
    }) => Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: string[] | [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }] | [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    signTransactionBlock: ({ signer, transactionInput }: {
        signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner;
        transactionInput: import("./types/EthosSignTransactionBlockInput").EthosSignTransactionBlockInput;
    }) => Promise<import("@mysten/sui.js").SignedTransaction>;
    executeTransactionBlock: ({ signer, transactionInput }: {
        signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner;
        transactionInput: import("./types/EthosExecuteTransactionBlockInput").EthosExecuteTransactionBlockInput;
    }) => Promise<{
        digest: string;
        timestampMs?: string | undefined;
        transaction?: {
            data: {
                sender: string;
                messageVersion: "v1";
                transaction: {
                    epoch: string;
                    storage_charge: string;
                    computation_charge: string;
                    storage_rebate: string;
                    kind: "ChangeEpoch";
                    epoch_start_timestamp_ms?: string | undefined;
                } | {
                    epoch: string;
                    round: string;
                    commit_timestamp_ms: string;
                    kind: "ConsensusCommitPrologue";
                } | {
                    objects: string[];
                    kind: "Genesis";
                } | {
                    transactions: ({
                        MoveCall: {
                            function: string;
                            package: string;
                            module: string;
                            arguments?: ("GasCoin" | {
                                Input: number;
                            } | {
                                Result: number;
                            } | {
                                NestedResult: [number, number];
                            })[] | undefined;
                            type_arguments?: string[] | undefined;
                        };
                    } | {
                        TransferObjects: [("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[], "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        SplitCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        MergeCoins: ["GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    } | {
                        Publish: string[] | [{
                            disassembled: Record<string, string>;
                        }, string[]];
                    } | {
                        Upgrade: [string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }] | [{
                            disassembled: Record<string, string>;
                        }, string[], string, "GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        }];
                    } | {
                        MakeMoveVec: [string | null, ("GasCoin" | {
                            Input: number;
                        } | {
                            Result: number;
                        } | {
                            NestedResult: [number, number];
                        })[]];
                    })[];
                    inputs: ({
                        type: "pure";
                        value: import("@mysten/sui.js").SuiJsonValue;
                        valueType?: string | undefined;
                    } | {
                        type: "object";
                        objectType: "immOrOwnedObject";
                        objectId: string;
                        version: string;
                        digest: string;
                    } | {
                        type: "object";
                        objectType: "sharedObject";
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    })[];
                    kind: "ProgrammableTransaction";
                };
                gasData: {
                    payment: {
                        objectId: string;
                        version: string | number;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
            };
            txSignatures: string[];
        } | undefined;
        effects?: {
            messageVersion: "v1";
            status: {
                status: "success" | "failure";
                error?: string | undefined;
            };
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObject: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            };
            modifiedAtVersions?: {
                objectId: string;
                sequenceNumber: string;
            }[] | undefined;
            sharedObjects?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            created?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            mutated?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            unwrapped?: {
                owner: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                };
                reference: {
                    objectId: string;
                    version: string | number;
                    digest: string;
                };
            }[] | undefined;
            deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            unwrapped_then_deleted?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            wrapped?: {
                objectId: string;
                version: string | number;
                digest: string;
            }[] | undefined;
            eventsDigest?: string | undefined;
            dependencies?: string[] | undefined;
        } | undefined;
        events?: {
            id: {
                txDigest: string;
                eventSeq: string;
            };
            packageId: string;
            transactionModule: string;
            sender: string;
            type: string;
            parsedJson?: Record<string, any> | undefined;
            bcs?: string | undefined;
            timestampMs?: string | undefined;
        }[] | undefined;
        checkpoint?: string | undefined;
        confirmedLocalExecution?: boolean | undefined;
        objectChanges?: ({
            packageId: string;
            type: "published";
            version: string;
            digest: string;
            modules: string[];
        } | {
            sender: string;
            type: "transferred";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            recipient: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        } | {
            sender: string;
            type: "mutated";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            previousVersion: string;
        } | {
            sender: string;
            type: "deleted";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "wrapped";
            objectType: string;
            objectId: string;
            version: string;
        } | {
            sender: string;
            type: "created";
            objectType: string;
            objectId: string;
            version: string;
            digest: string;
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
        })[] | undefined;
        balanceChanges?: {
            owner: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            };
            coinType: string;
            amount: string;
        }[] | undefined;
        errors?: string[] | undefined;
    }>;
    preapprove: ({ signer, preapproval }: import("./lib/preapprove").PreapprovalArgs) => Promise<any>;
    showWallet: (signer: Signer) => void;
    hideWallet: (signer: Signer) => void;
    showSignInModal: typeof showSignInModal;
    hideSignInModal: typeof hideSignInModal;
    useProviderAndSigner: () => ProviderAndSigner;
    useAddress: () => string | undefined;
    useContents: () => WalletContents | undefined;
    useWallet: () => import("./types/WalletContextContents").WalletContextContents;
    useContext: ({ configuration, onWalletConnected }: import("./hooks/useContext").UseContextArgs) => import("./types/ConnectContextContents").ConnectContextContents;
    getWalletContents: ({ address, network, existingContents }: import("./lib/getWalletContents").GetWalletContentsArgs) => Promise<WalletContents | null>;
    checkForAssetType: ({ signer, wallet, type, cursor, options, filter }: import("./lib/checkForAssetType").CheckForAssetTypeArgs) => Promise<{
        data: {
            data?: {
                objectId: string;
                version: string;
                digest: string;
                type?: string | undefined;
                bcs?: {
                    type: string;
                    fields: Record<string, any>;
                    hasPublicTransfer: boolean;
                    dataType: "moveObject";
                } | {
                    id: string;
                    dataType: "package";
                    moduleMap: Record<string, string>;
                } | undefined;
                owner?: "Immutable" | {
                    AddressOwner: string;
                } | {
                    ObjectOwner: string;
                } | {
                    Shared: {
                        initial_shared_version: number;
                    };
                } | undefined;
                storageRebate?: string | undefined;
                previousTransaction?: string | undefined;
                content?: {
                    type: string;
                    fields: Record<string, any>;
                    hasPublicTransfer: boolean;
                    dataType: "moveObject";
                } | {
                    disassembled: Record<string, string>;
                    dataType: "package";
                } | undefined;
                display?: Record<string, string> | {
                    data: Record<string, string> | null;
                    error: {
                        code: string;
                        version?: string | undefined;
                        digest?: string | undefined;
                        error?: string | undefined;
                        object_id?: string | undefined;
                    } | null;
                } | undefined;
            } | undefined;
            error?: {
                code: string;
                version?: string | undefined;
                digest?: string | undefined;
                error?: string | undefined;
                object_id?: string | undefined;
            } | undefined;
        }[];
        nextCursor: string | {
            objectId: string;
            atCheckpoint?: number | undefined;
        } | null;
        hasNextPage: boolean;
    } | undefined>;
    dripSui: ({ address, network, faucet }: {
        address: string;
        network?: string | undefined;
        faucet?: string | undefined;
    }) => Promise<{
        error: string | null;
        transferredGasObjects: {
            id: string;
            amount: number;
            transferTxDigest: string;
        }[];
    }>;
    getSuiName: (address: string, network: string, sender?: string) => Promise<string>;
    getSuiAddress: (domain: string, network: string, sender?: string) => Promise<string>;
    formatBalance: (balance?: string | number | bigint | undefined, decimals?: number) => string;
    truncateMiddle: (text: string, length?: number) => string;
    ipfsConversion: (src?: string | undefined) => string;
    components: {
        AddressWidget: ({ includeMenu, buttonColor, extraButtons, excludeButtons, externalContext }: import("./components/styled/AddressWidget").AddressWidgetProps) => JSX.Element;
        MenuButton: (props: import("./components/headless/HoverColorButton").HoverColorButtonProps) => JSX.Element;
        headless: {
            HoverColorButton: (props: import("./components/headless/HoverColorButton").HoverColorButtonProps) => JSX.Element;
        };
    };
    enums: {
        AddressWidgetButtons: typeof AddressWidgetButtons;
    };
};
export { EthosConnectProvider, DetachedEthosConnectProvider, SignInButton, ethos, EthosConnectStatus, TransactionBlock, verifyMessage, IntentScope, Chain };
export type { Wallet, WalletAccount, WalletContents, ProviderAndSigner, Signer, SuiNFT, Token };
