import u from"lodash";import{Connection as _,JsonRpcProvider as p,TransactionBlock as r}from"@mysten/sui.js";import{DEFAULT_NETWORK as m}from"./constants.js";const d="0xe7ed73e4c2c1b38729155bf5c44dc4496a9edd2f",y="0xa378adb13792599e8eb8c7e4f2e938863921e4f4",E="0x0000000000000000000000000000000000000002",w="results.Ok[0][1].returnValues[0][0]",x="results.Ok[0][1].returnValues[1][0]",f=e=>e?.length>0?Array.from(e,n=>("0"+(n&255).toString(16)).slice(-2)).join(""):"",k=e=>e?.length>0?new TextDecoder().decode(Buffer.from(e.slice(1)).buffer):"",B=e=>String(e?.match(/0x0{0,}([\w\d]+)/)?.[1]),S=e=>e?`0x${e.padStart(40,"0")}`:"",D=async(e,n,o=E)=>{const v=new _({fullnode:n||m}),s=new p(v);try{const t=new r;t.add(r.Transactions.MoveCall({target:`${d}::base_registry::get_record_by_key`,arguments:[t.object(y),t.pure(`${B(e)}.addr.reverse`)]}));const c=u.get(await s.devInspectTransactionBlock({transactionBlock:t,sender:o}),x);if(!c)return e;const a=S(f(c)),i=new r;i.add(r.Transactions.MoveCall({target:`${d}::resolver::name`,arguments:[t.object(a),t.pure(e)]}));const l=await s.devInspectTransactionBlock({transactionBlock:i,sender:o}),g=u.get(l,w);return g?k(g):e}catch(t){return console.log("Error retreiving SuiNS Name",t),e}},C=async(e,n,o=E)=>{const v=new _({fullnode:n||m}),s=new p(v);try{const t=new r;t.add(r.Transactions.MoveCall({target:`${d}::base_registry::get_record_by_key`,arguments:[t.object(y),t.pure(e)]}));const c=await s.devInspectTransactionBlock({transactionBlock:t,sender:o}),a=u.get(c,x);if(!a)return e;const i=S(f(a)),l=new r;l.add(r.Transactions.MoveCall({target:`${d}::resolver::addr`,arguments:[t.object(i),t.pure(e)]}));const g=await s.devInspectTransactionBlock({transactionBlock:l,sender:o}),T=u.get(g,w);return T?S(f(T)):e}catch(t){return console.log("Error retrieving address from SuiNS name",t),e}};export{C as getSuiAddress,D as getSuiName};
