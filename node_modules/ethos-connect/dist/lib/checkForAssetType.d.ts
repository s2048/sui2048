import { ObjectId, PaginatedObjectsResponse, SuiObjectDataFilter, SuiObjectDataOptions } from "@mysten/sui.js";
import { Signer } from "../types/Signer";
import { Wallet } from '../types/Wallet';
export interface CheckForAssetTypeArgs {
    signer?: Signer;
    wallet?: Wallet;
    type?: ObjectId;
    cursor?: PaginatedObjectsResponse['nextCursor'];
    options?: SuiObjectDataOptions;
    filter: SuiObjectDataFilter;
}
declare const checkForAssetType: ({ signer, wallet, type, cursor, options, filter }: CheckForAssetTypeArgs) => Promise<{
    data: {
        data?: {
            objectId: string;
            version: string;
            digest: string;
            type?: string | undefined;
            bcs?: {
                type: string;
                fields: Record<string, any>;
                hasPublicTransfer: boolean;
                dataType: "moveObject";
            } | {
                id: string;
                dataType: "package";
                moduleMap: Record<string, string>;
            } | undefined;
            owner?: "Immutable" | {
                AddressOwner: string;
            } | {
                ObjectOwner: string;
            } | {
                Shared: {
                    initial_shared_version: number;
                };
            } | undefined;
            storageRebate?: string | undefined;
            previousTransaction?: string | undefined;
            content?: {
                type: string;
                fields: Record<string, any>;
                hasPublicTransfer: boolean;
                dataType: "moveObject";
            } | {
                disassembled: Record<string, string>;
                dataType: "package";
            } | undefined;
            display?: Record<string, string> | {
                data: Record<string, string> | null;
                error: {
                    code: string;
                    version?: string | undefined;
                    digest?: string | undefined;
                    error?: string | undefined;
                    object_id?: string | undefined;
                } | null;
            } | undefined;
        } | undefined;
        error?: {
            code: string;
            version?: string | undefined;
            digest?: string | undefined;
            error?: string | undefined;
            object_id?: string | undefined;
        } | undefined;
    }[];
    nextCursor: string | {
        objectId: string;
        atCheckpoint?: number | undefined;
    } | null;
    hasNextPage: boolean;
} | undefined>;
export default checkForAssetType;
